name: Build and Push web to Google Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GCP_GAR_LOCATION }}
  REPOSITORY: ${{ secrets.GCP_REPOSITORY }}
  SERVICE: ${{ secrets.GCP_WEB_SERVICE }}
  REGION: ${{ secrets.GCP_REGION }}
  VITE_API_HOST: ${{ secrets.VITE_API_HOST }}

jobs:
  deploy-web:
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"
          token_format: "access_token"

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: docker/login-action@v3
        with:
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"

      # Build and Push a Docker container for the web app
      - name: Build and Push a container
        run: |-
          docker build \
            --build-arg VITE_API_HOST=${{ env.VITE_API_HOST }} \
            -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./apps/web
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
